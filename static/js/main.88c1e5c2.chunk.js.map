{"version":3,"sources":["InfoBox.js","Table.js","util.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","isRed","isGrey","active","cases","total","props","Card","onClick","className","CardContent","Typography","color","isloading","Table","countries","map","country","numeral","format","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","start","Date","end","setDate","getDate","setHours","options","legend","display","layout","lineWidth","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","min","max","unit","tooltipFormat","ticks","fontFamily","yAxes","gridLines","callback","index","values","buildChartData","casesType","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","countryInfo","setCountryInfo","tableData","setTableData","setCasesType","isLoading","setLoading","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","url","FormControl","Select","variant","onChange","MenuItem","e","todayCases","recovered","todayRecovered","deaths","todayDeaths","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.88c1e5c2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport \"./InfoBox.css\";\r\nfunction InfoBox({ title, isRed, isGrey, active, cases, total, ...props }) {\r\n  return (\r\n    <Card\r\n      onClick={props.onClick}\r\n      className={`infoBox ${active && \"infoBox--selected\"} ${isRed && \"infoBox--red\"\r\n        } ${isGrey && \"infoBox--grey\"}`}\r\n    >\r\n      <CardContent>\r\n        {/* Title */}\r\n        <Typography className=\"infoBox__title\" color=\"textSecondary\">\r\n          {title}\r\n        </Typography>\r\n\r\n        {/* Number of Cases */}\r\n        <h2 className=\"infoBox__cases_today\">Today:</h2>\r\n        <h2\r\n          className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"} ${isGrey && \"infoBox__cases--grey\"\r\n            }`}\r\n        >\r\n          {props.isloading ? <i className=\"fa fa-cog fa-spin fa-fw\" /> : cases}\r\n        </h2>\r\n\r\n        {/* Total Cases */}\r\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n          <span className=\"infoBox__total_plainText\">TOTAL: </span>{total}\r\n        </Typography>\r\n      </CardContent>\r\n    </Card >\r\n  );\r\n}\r\n\r\nexport default InfoBox;\r\n","import React from \"react\";\r\nimport \"./Table.css\";\r\nimport numeral from \"numeral\";\r\n\r\nfunction Table({ countries }) {\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.map(({ country, cases }) => (\r\n        <tr>\r\n          <td>{country}</td>\r\n          <td>\r\n            <strong>{numeral(cases).format(\"000,000\")}</strong>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import numeral from \"numeral\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    mulitiplier: 800,\r\n  },\r\n\r\n  recovered: {\r\n    hex: \"#7DD71D\",\r\n    mulitiplier: 1200,\r\n  },\r\n\r\n  deaths: {\r\n    hex: \"#4d1414\",\r\n    mulitiplier: 2000,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  const sortedData = [...data];\r\n\r\n  sortedData.sort((a, b) => b.cases - a.cases);\r\n\r\n  return sortedData;\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\nimport \"./InfoBox.css\";\r\n\r\nlet start = new Date();\r\nlet end = new Date();\r\n\r\nstart.setDate(start.getDate() - 20); // set to 'now' minus 7 days.\r\nstart.setHours(0, 0, 0, 0); // set to midnight.\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  layout: {\r\n    lineWidth: 2,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          min: start,\r\n          max: end,\r\n          unit: \"day\",\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n        ticks: {\r\n          fontFamily: \"'Spartan', sans-serif\",\r\n        }\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n          fontFamily: \"'Spartan', sans-serif\",\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType, ...props }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n          console.log(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport {\r\n  MenuItem,\r\n  FormControl,\r\n  Select,\r\n  CardContent,\r\n  Card,\r\n} from \"@material-ui/core\";\r\nimport InfoBox from \"./InfoBox\";\r\nimport Table from \"./Table\";\r\nimport { sortData, prettyPrintStat } from \"./util\";\r\nimport LineGraph from \"./LineGraph\";\r\nimport \"./InfoBox.css\";\r\n\r\nfunction App() {\r\n  const [countries, setCountries] = useState([]);\r\n  const [country, setCountry] = useState(\"worldwide\");\r\n  const [countryInfo, setCountryInfo] = useState({});\r\n  const [tableData, setTableData] = useState([]);\r\n  const [casesType, setCasesType] = useState(\"cases\");\r\n  const [isLoading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://disease.sh/v3/covid-19/all\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setCountryInfo(data);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const getCountriesData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          const countries = data.map((country) => ({\r\n            name: country.country,\r\n            value: country.countryInfo.iso2,\r\n          }));\r\n\r\n          const sortedData = sortData(data);\r\n          setTableData(sortedData);\r\n          setCountries(countries);\r\n        });\r\n    };\r\n\r\n    getCountriesData();\r\n  }, []);\r\n\r\n  const onCountryChange = async (event) => {\r\n    setLoading(true);\r\n    const countryCode = event.target.value;\r\n\r\n    setCountry(countryCode);\r\n\r\n    const url =\r\n      countryCode === \"worldwide\"\r\n        ? \"https://disease.sh/v3/covid-19/all\"\r\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\r\n\r\n    await fetch(url)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setCountry(countryCode);\r\n        setCountryInfo(data);\r\n        setLoading(false);\r\n      });\r\n\r\n    console.log(countryInfo);\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"app__left\">\r\n        <div className=\"app__header\">\r\n          <h1>Covid-19 tracker</h1>\r\n          <FormControl className=\"app__dropdown\">\r\n            <Select\r\n              variant=\"outlined\"\r\n              onChange={onCountryChange}\r\n              value={country}\r\n            >\r\n              <MenuItem value=\"worldwide\">Global</MenuItem>\r\n              {countries.map((country) => (\r\n                <MenuItem value={country.value}>{country.name}</MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        </div>\r\n\r\n        <div className=\"app__stats\">\r\n          <InfoBox\r\n            isRed\r\n            active={casesType === \"cases\"}\r\n            className=\"infoBox__cases\"\r\n            onClick={(e) => setCasesType(\"cases\")}\r\n            title=\"Cases\"\r\n            total={prettyPrintStat(countryInfo.cases)}\r\n            cases={prettyPrintStat(countryInfo.todayCases)}\r\n            isloading={isLoading}\r\n          />\r\n          <InfoBox\r\n            active={casesType === \"recovered\"}\r\n            className=\"infoBox__recovered\"\r\n            onClick={(e) => setCasesType(\"cases\")}\r\n            title=\"Healed\"\r\n            total={prettyPrintStat(countryInfo.recovered)}\r\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\r\n            isloading={isLoading}\r\n          />\r\n          <InfoBox\r\n            isGrey\r\n            active={casesType === \"deaths\"}\r\n            className=\"Deaths\"\r\n            onClick={(e) => setCasesType(\"cases\")}\r\n            title=\"Deaths\"\r\n            total={prettyPrintStat(countryInfo.deaths)}\r\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\r\n            isloading={isLoading}\r\n          />\r\n        </div>\r\n        <h3 className=\"app__graphTitle\">WorldWide new {casesType}</h3>\r\n        <LineGraph className=\"app__graph\" casesType={casesType} />\r\n      </div>\r\n      <Card className=\"app__right\">\r\n        <CardContent>\r\n          <h3>Live Cases by Country</h3>\r\n          <Table countries={tableData} />\r\n        </CardContent>\r\n      </Card>\r\n      <div className=\"visit-me\">\r\n        <a href=\"https://www.alexiglesias.in/#work\" target=\"__blank\" className=\"visit-me-link\">Go back</a>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}